{"version":3,"sources":["enum/index.ts","EditorSection/Leaf.tsx","ActionSection/BlockButton.tsx","KeyEvent/index.ts","Util/index.ts","Plugin/WithHref.ts","ActionSection/ImageButton.tsx","ActionSection/StyleButton.tsx","EditorSection/component/Image.tsx","EditorSection/component/Href.tsx","EditorSection/index.tsx","init.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MARK_TYPE_ENUM","PARAGRAPH_TYPE_ENUM","Leaf","props","attributes","children","leaf","cssProperties","bold","Object","assign","italic","underline","color","background","style","isBlockActive","editor","type","nodes","Editor","match","n","isEditor","Element","isElement","paragraphChildrenType","Map","set","orderList","listItem","unOrderList","BlockButton","icon","value","useSlate","onMouseDown","selection","isType","hasChild","has","Transforms","unwrapNodes","split","node","unsetNodes","setNodes","get","wrapNodes","switchBlockType","AUXILIARY_ENUM","KEY_ENUM","isUrl","path","trim","test","unwrapLink","link","wrapLink","url","isLinkActive","isCollapsed","Range","text","insertNodes","collapse","edge","withHref","insertData","isVoid","isInline","element","image","data","getData","insertHref","ImageButton","useSlateStatic","useState","setUrl","visible","setVisible","setSelection","title","onOk","error","at","end","insertImage","onCancel","getContainer","placeholder","onChange","e","target","event","preventDefault","initKeyMap","ENTER","keyDownHandle","keys","CTRL_KEY","SHIFT_KEY","META_KEY","ALT_KEY","reduce","sum","key","fn","isMarkActive","masks","marks","StyleButton","removeMark","addMark","switchMark","ImageBlock","selected","useSelected","focused","useFocused","contentEditable","suppressContentEditableWarning","src","alt","maxWidth","maxHeight","boxShadow","Href","css","Edit","onClick","window","open","ShareAltOutlined","DeleteOutlined","placement","trigger","href","plugins","withReact","withHistory","EditorSection","setNodeList","useMemo","plugin","createEditor","renderLeaf","useCallback","className","BoldOutlined","fontWeight","ItalicOutlined","fontStyle","UnderlineOutlined","textDecoration","FontColorsOutlined","BgColorsOutlined","OrderedListOutlined","UnorderedListOutlined","CameraOutlined","renderElement","cssItem","onKeyDown","spellCheck","autoFocus","initRichTexts","App","length","prototype","hasOwnProperty","call","concat","tableConfig","columns","dataIndex","width","render","JSON","stringify","textOverflow","whiteSpace","overflow","pagination","rowKey","Math","random","dataSource","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c04b498f.chunk.js","sourcesContent":["export enum MARK_TYPE_ENUM {\n    bold = 'bold',\n    code = 'code',\n    italic = 'italic',\n    underline = 'underline',\n    color = 'color',\n    background = 'background',\n}\n\nexport enum PARAGRAPH_TYPE_ENUM {\n    orderList = 'orderList',\n    listItem = 'listItem',\n    table = 'table',\n    tableData = 'tableData',\n    unOrderList = 'unOrderList',\n    image = 'image',\n    link = 'link'\n}\n\n","import React, {CSSProperties} from 'react'\nimport {RenderLeafProps} from 'slate-react'\nimport {MARK_TYPE_ENUM} from '../enum'\n\nexport default function Leaf(props: RenderLeafProps): JSX.Element {\n    let { attributes, children, leaf } = props\n    let cssProperties: CSSProperties = {}\n    if (!children) children = <></>\n    if (leaf[MARK_TYPE_ENUM.bold]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.bold])\n    }\n    if (leaf[MARK_TYPE_ENUM.italic]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.italic])\n    }\n    if (leaf[MARK_TYPE_ENUM.underline]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.underline])\n    }\n    if (leaf[MARK_TYPE_ENUM.color]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.color])\n    }\n    if (leaf[MARK_TYPE_ENUM.background]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.background])\n    }\n\n    return <span {...attributes} style={cssProperties}>{children}</span>\n}\n\n","import React from 'react'\nimport {useSlate} from 'slate-react'\nimport {Button} from 'antd'\nimport {PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {BaseEditor, BaseElement, Editor, Element, Transforms} from 'slate'\n\n\nexport interface IComponentButtonProps {\n    type: PARAGRAPH_TYPE_ENUM,\n    value: object[],\n    icon?: React.ReactNode\n}\n\nconst isBlockActive = (editor: BaseEditor, type: PARAGRAPH_TYPE_ENUM) => {\n    let nodes = Editor.nodes(editor, {\n        match: n => {\n            return !Editor.isEditor(n) && Element.isElement(n) && n.type === type\n        }\n    })\n    for (const nodeElement of nodes) {\n        if ((nodeElement[0] as BaseElement).type === type) return true\n    }\n    return false\n}\nconst paragraphChildrenType = new Map()\nparagraphChildrenType.set(PARAGRAPH_TYPE_ENUM.orderList, PARAGRAPH_TYPE_ENUM.listItem)\nparagraphChildrenType.set(PARAGRAPH_TYPE_ENUM.unOrderList, PARAGRAPH_TYPE_ENUM.listItem)\n\nconst switchBlockType = (editor: BaseEditor, type: PARAGRAPH_TYPE_ENUM, value: object[]) => {\n    const isType = isBlockActive(editor, type)\n    const hasChild = paragraphChildrenType.has(type)\n    // 如果是段落组件，就把属性解除\n    Transforms.unwrapNodes(editor, {\n        split: true,\n        match: node => {\n            return !Editor.isEditor(node)\n                && Element.isElement(node)\n                && paragraphChildrenType.has(node.type)\n        }\n    })\n    if (isType) {\n        Transforms.unsetNodes(editor, 'type')\n    } else {\n        Transforms.setNodes(editor, {\n            type: hasChild ? paragraphChildrenType.get(type): type\n        })\n    }\n    if (!isType && hasChild) {\n        Transforms.wrapNodes(editor, {\n            type, children: []\n        })\n    }\n\n}\nexport default function BlockButton(props: IComponentButtonProps): JSX.Element {\n    const {\n        type, value, icon\n    } = props\n    const editor = useSlate()\n\n    const mouseDownHandle = () => {\n        if (!editor.selection) return\n        switchBlockType(editor, type, value)\n    }\n    return <>\n        <Button\n            icon={icon}\n            onMouseDown={mouseDownHandle}\n            type={isBlockActive(editor, type) ? 'primary' : 'text'}\n        >\n            {type}\n        </Button>\n    </>\n}\n","import {KeyboardEvent} from 'react'\nimport {Editor, Transforms, Element} from 'slate'\nimport {ReactEditor} from 'slate-react'\nimport {PARAGRAPH_TYPE_ENUM} from '../enum'\n\n\nenum AUXILIARY_ENUM {\n    ALT_KEY = 'altKey',\n    SHIFT_KEY = 'shiftKey',\n    CTRL_KEY = 'ctrlKey',\n    META_KEY= 'metaKey'\n}\nenum KEY_ENUM {\n    ENTER = 'Enter',\n    DEL = 'Backspace'\n}\n\nconst initKeyMap = new Map<any, (editor: ReactEditor, event: KeyboardEvent) => boolean>()\n\ninitKeyMap.set(KEY_ENUM.ENTER, (editor: ReactEditor, event: KeyboardEvent) => {\n    const [node] = Editor.nodes(editor, {\n        match: node => {\n            return !Editor.isEditor(node) && Element.isElement(node) && node.type === PARAGRAPH_TYPE_ENUM.link\n        }\n    })\n    if (node) {\n        Transforms.insertNodes(editor, {children: [{text: ''}]})\n        event.preventDefault()\n    }\n    return false;\n\n})\n\nconst keyDownHandle = (event: KeyboardEvent, editor: ReactEditor) => {\n    const assistKeys = [AUXILIARY_ENUM.CTRL_KEY, AUXILIARY_ENUM.SHIFT_KEY, AUXILIARY_ENUM.META_KEY, AUXILIARY_ENUM.ALT_KEY]\n    const keys = assistKeys.reduce((sum, key) => {\n        return sum + (event[key] ? key : '')\n    }, '')\n    if (initKeyMap.has(keys + event.key)) {\n        const fn = initKeyMap.get(keys + event.key)\n        const flag = fn && fn(editor, event)\n        if (flag) event.preventDefault()\n    }\n}\nexport default keyDownHandle\n","import {BaseEditor, Editor, Element, Range, Selection, Transforms} from 'slate'\nimport {PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {message} from 'antd'\nimport {ReactEditor} from 'slate-react'\n\nexport const isUrl = (path: string) => {\n    path = path.trim()\n    const reg = /(((^https?:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+(?::\\d+)?|(?:www.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%\\/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[\\w]*))?)$/;\n    return reg.test(path);\n}\nexport const isLinkActive = (editor: ReactEditor) => {\n    const [link] = Editor.nodes(editor, {\n        match: n =>\n            !Editor.isEditor(n) && Element.isElement(n) && n.type === PARAGRAPH_TYPE_ENUM.link,\n    })\n    return !!link\n}\n\nexport const unwrapLink = (editor: ReactEditor) => {\n    Transforms.unwrapNodes(editor, {\n        match: n =>\n            !Editor.isEditor(n) && Element.isElement(n) && n.type === PARAGRAPH_TYPE_ENUM.link,\n    })\n}\n// 将选中的结点包裹成Href\nexport const wrapLink = (editor: ReactEditor, url: string) => {\n    if (isLinkActive(editor)) {\n        unwrapLink(editor)\n    }\n\n    const { selection } = editor\n    const isCollapsed = selection && Range.isCollapsed(selection)\n    const link = {\n        type: 'link',\n        url,\n        children: isCollapsed ? [{ text: url }] : [],\n    }\n\n    if (isCollapsed) {\n        Transforms.insertNodes(editor, link)\n    } else {\n        Transforms.wrapNodes(editor, link, { split: true })\n        Transforms.collapse(editor, { edge: 'end' })\n        // 插入一个空格规避光标BUG\n    }\n}\n\nexport const insertHref = (editor: ReactEditor, url: string) => {\n    if (editor.selection) {\n        wrapLink(editor, url)\n    }\n}\nexport const insertImage = (editor: BaseEditor, url: string, selection?: Selection) => {\n    if (!isUrl(url)) {\n        message.error('请输入正确的图片URL')\n        return\n    }\n    // 如果指定了位置就在特定位置插入\n    Transforms.insertNodes(editor, {\n        type: PARAGRAPH_TYPE_ENUM.image, url, children: [{text: url}]\n    }, {\n        at: selection || editor.selection || Editor.end(editor, [])\n    })\n\n}\n","import {ReactEditor} from 'slate-react'\nimport {PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {insertHref, isUrl} from '../Util'\n\n\nconst withHref = (editor: ReactEditor) => {\n    const { insertData, isVoid, isInline } = editor\n    editor.isVoid = element => {\n        return element.type === PARAGRAPH_TYPE_ENUM.image ? true : isVoid(element)\n    }\n    editor.isInline = element => {\n        return element.type === PARAGRAPH_TYPE_ENUM.link ? true : isInline(element)\n    }\n    editor.insertData = data => {\n        const text = data.getData('text/plain')\n        if (isUrl(text)) {\n            insertHref(editor, '  ' + text)\n        } else {\n            insertData(data)\n        }\n    }\n    return editor\n}\nexport default withHref\n","/* eslint-disable */\nimport React, {ReactNode, useState} from 'react'\nimport {Button, Input, message, Modal} from 'antd'\nimport {PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {useSlateStatic} from 'slate-react'\nimport {insertImage, isUrl} from '../Util'\nimport {Selection, Transforms} from 'slate'\n\ninterface IImageButtonProps {\n    type: PARAGRAPH_TYPE_ENUM,\n    icon?: ReactNode\n}\n\nexport default function ImageButton(props: IImageButtonProps): JSX.Element {\n    const {\n        type, icon\n    } = props\n    const editor = useSlateStatic()\n    const [url, setUrl] = useState('')\n    const [visible, setVisible] = useState(false)\n    const [selection, setSelection] = useState<Selection>(null)\n    const mouseDownHandle = (event: React.MouseEvent) => {\n        event.preventDefault()\n        setVisible(true)\n        //缓存selection\n        setSelection(editor.selection)\n    }\n    const onOk = () => {\n        if (!isUrl(url)) {\n            return message.error('请输入正确的图片URL')\n        }\n        insertImage(editor, url, selection || editor.selection)\n        setVisible(false)\n        setUrl('')\n    }\n    return <>\n        <Modal title={'请输入图片url'} visible={visible} onOk={onOk} onCancel={() => setVisible(false)} getContainer={false}>\n            <Input placeholder={'请输入图片url'} onChange={e => {\n                setUrl(e.target.value)}\n            } value={url}/>\n        </Modal>\n        <Button icon={icon} onMouseDown={mouseDownHandle} type={'text'}>{type}</Button>\n    </>\n}\n","import React, {CSSProperties} from 'react'\nimport {useSlate} from 'slate-react'\nimport {BaseEditor, Editor} from 'slate'\nimport {Button} from 'antd'\nimport {MARK_TYPE_ENUM} from '../enum'\n\ninterface IStyleButtonProps {\n    type: MARK_TYPE_ENUM,\n    value: CSSProperties,\n    icon?: React.ReactNode\n}\n\nconst isMarkActive = (editor: BaseEditor, type: MARK_TYPE_ENUM) => {\n    if (!editor.selection) return false\n    const masks = Editor.marks(editor)\n    return masks ? masks[type] : false\n}\nconst switchMark = (editor: BaseEditor, type: MARK_TYPE_ENUM, value: CSSProperties) => {\n    const isType = isMarkActive(editor, type)\n    if (isType) {\n        Editor.removeMark(editor, type)\n    } else {\n        Editor.addMark(editor, type, value)\n    }\n}\nexport default function StyleButton(props: IStyleButtonProps): JSX.Element {\n    const {\n        type, value, icon\n    } = props\n    const editor = useSlate()\n\n    const clickHandle = () => {\n        switchMark(editor, type, value)\n    }\n    return <Button icon={icon} onMouseDown={clickHandle} type={isMarkActive(editor, type) ? 'primary' : 'text'}>\n        {type}\n    </Button>\n}\n\n","import React from 'react'\nimport {RenderElementProps, useFocused, useSelected} from 'slate-react'\n\nexport function ImageBlock (props: RenderElementProps): JSX.Element {\n    let {\n        element, attributes, children\n    } = props\n    const selected = useSelected()\n    const focused = useFocused()\n    return <span {...attributes}>\n        <span contentEditable={'false'} suppressContentEditableWarning={true}>\n            <img src={element.url} alt=\"图片\" style={{\n                maxWidth: '100%', maxHeight: '20em', boxShadow: `${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'}`\n            }}/>\n        </span>\n        {children}\n    </span>\n}\n","import React from 'react'\nimport {ReactEditor, RenderElementProps, RenderLeafProps, useSlate, useSlateStatic} from 'slate-react'\nimport {IHrefProps} from '../../@types/slate.js'\nimport {PARAGRAPH_TYPE_ENUM} from '../../enum'\nimport {Button, Tooltip} from 'antd'\nimport {DeleteOutlined, EditOutlined, ShareAltOutlined} from '@ant-design/icons'\nimport {unwrapLink} from '../../Util'\n// TODO 渲染应该以text为准\nexport default function Href (props: RenderElementProps): JSX.Element {\n    let { children, element } = props\n    let {\n        url, css\n    } = element\n    const style = css ? css.reduce((style, css) => Object.assign(style, css), {}) : {}\n    const editor = useSlateStatic() as ReactEditor\n    const Edit = <>\n        <Button type={'text'} onClick={() => window.open(url)}><ShareAltOutlined />访问</Button>\n        <Button type={'text'} onClick={() => unwrapLink(editor)}><DeleteOutlined />取消链接</Button>\n    </>\n\n    return <span>\n        <Tooltip title={Edit} placement={'bottom'} color={'white'} trigger={'click'}>\n            <a href={url} style={style}>{children}</a>\n        </Tooltip>\n    </span>\n}\n","import React, {useCallback, useMemo} from 'react'\nimport {Editable, ReactEditor, RenderElementProps, RenderLeafProps, Slate, withReact} from 'slate-react'\nimport {createEditor, Descendant} from 'slate'\nimport Leaf from './Leaf'\nimport {MARK_TYPE_ENUM, PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {\n    BgColorsOutlined,\n    BoldOutlined, CameraOutlined,\n    FontColorsOutlined,\n    ItalicOutlined,\n    OrderedListOutlined,\n    UnderlineOutlined,\n    UnorderedListOutlined\n} from '@ant-design/icons'\nimport BlockButton from '../ActionSection/BlockButton'\nimport {withHistory} from 'slate-history'\nimport withHref from '../Plugin/WithHref'\nimport ImageButton from '../ActionSection/ImageButton'\nimport keyDownHandle from '../KeyEvent'\nimport StyleButton from '../ActionSection/StyleButton'\nimport {ImageBlock} from './component/Image'\nimport Href from './component/Href'\n\nconst plugins = [\n    withReact,\n    withHistory,\n    withHref\n]\n\nexport default function EditorSection (props: {nodes: Descendant[], setNodeList:(value: Descendant[]) => void}) {\n    const {\n        nodes, setNodeList\n    } = props\n    const editor = useMemo(() => {\n        return plugins.reduce((editor, plugin) => {\n            return plugin(editor)\n        }, createEditor() as ReactEditor)\n    }, [])\n\n    const render = (props: RenderElementProps):JSX.Element => {\n        let {\n            element, attributes, children\n        } = props\n        const css = element.css ? element.css.reduce((css, cssItem) => Object.assign(css, cssItem), {}) : {};\n        attributes = Object.assign(attributes, {style: css})\n        switch (element.type) {\n            case PARAGRAPH_TYPE_ENUM.orderList: {\n                return <ol {...attributes}>{children}</ol>\n            }\n            case PARAGRAPH_TYPE_ENUM.unOrderList: {\n                return <ul {...attributes}>{children}</ul>\n            }\n            case PARAGRAPH_TYPE_ENUM.listItem: {\n                return <li {...attributes}>{children}</li>\n            }\n            case PARAGRAPH_TYPE_ENUM.image: {\n                return <ImageBlock {...props} children={props.children}/>\n            }\n            case PARAGRAPH_TYPE_ENUM.link: {\n                return <Href {...props}  children={props.children}/>\n            }\n            default: {\n                return <p {...attributes}>{children}</p>\n            }\n        }\n    }\n    const renderLeaf = useCallback((props:RenderLeafProps) => {\n        return <Leaf {...props} children={props.children}/>\n    }, [])\n\n    return <div className={'slate-editor'}>\n        <Slate value={nodes} editor={editor} onChange={setNodeList}>\n            <StyleButton icon={<BoldOutlined />} type={MARK_TYPE_ENUM.bold} value={{fontWeight: 'bold'}}/>\n            <StyleButton icon={<ItalicOutlined />} type={MARK_TYPE_ENUM.italic} value={{fontStyle: 'oblique'}}/>\n            <StyleButton icon={<UnderlineOutlined />} type={MARK_TYPE_ENUM.underline} value={{textDecoration: 'underline'}}/>\n            <StyleButton icon={<FontColorsOutlined />} type={MARK_TYPE_ENUM.color} value={{color: 'green'}}/>\n            <StyleButton icon={<BgColorsOutlined />} type={MARK_TYPE_ENUM.background} value={{background: 'red'}}/>\n            <BlockButton icon={<OrderedListOutlined />} type={PARAGRAPH_TYPE_ENUM.orderList} value={[]} />\n            <BlockButton icon={<UnorderedListOutlined />} type={PARAGRAPH_TYPE_ENUM.unOrderList} value={[]} />\n            <ImageButton icon={<CameraOutlined />} type={PARAGRAPH_TYPE_ENUM.image} />\n            <hr/>\n            <Editable\n                renderElement={render}\n                renderLeaf={renderLeaf}\n                onKeyDown={event => keyDownHandle(event, editor)}\n                placeholder=\"rich demo\"\n                spellCheck\n                autoFocus\n            />\n        </Slate>\n    </div>\n}\n","import {Descendant} from 'slate'\n\nconst initRichTexts: Descendant[] = [\n    {\n        \"children\": [\n            {\n                \"text\": \"使用Slate + TypeScript + React Hook + Antd实现的数据驱动的富文本编辑器，暂时不支持代码高亮，使用类似Virtual Dom的机制和思想去实现编辑器功能.扩展性将更好\"\n            }\n        ]\n    },\n    {\n        \"type\": \"image\",\n        \"url\": \"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\",\n        \"children\": [\n            {\n                \"text\": \"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\"\n            }\n        ]\n    },\n    {\n        \"children\": [\n            {\n                \"text\": \"this is text\",\n                \"bold\": {\n                    \"fontWeight\": \"bold\"\n                },\n                \"italic\": {\n                    \"fontStyle\": \"oblique\"\n                }\n            }\n        ]\n    },\n    {\n        \"children\": [\n            {\n                \"text\": \"underline\",\n                \"underline\": {\n                    \"textDecoration\": \"underline\"\n                }\n            }\n        ]\n    },\n    {\n        \"type\": \"orderList\",\n        \"children\": [\n            {\n                \"children\": [\n                    {\n                        \"text\": \"有顺序列表\"\n                    }\n                ],\n                \"type\": \"listItem\"\n            },\n            {\n                \"type\": \"listItem\",\n                \"children\": [\n                    {\n                        \"text\": \"有顺序列表带加粗样式\",\n                        \"bold\": {\n                            \"fontWeight\": \"bold\"\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"type\": \"unOrderList\",\n        \"children\": [\n            {\n                \"children\": [\n                    {\n                        \"text\": \"无顺序列表\"\n                    }\n                ],\n                \"type\": \"listItem\"\n            },\n            {\n                \"type\": \"listItem\",\n                \"children\": [\n                    {\n                        \"text\": \"无顺序列表带样式\",\n                        \"color\": {\n                            \"color\": \"green\"\n                        }\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"children\": [\n            {\n                \"text\": \"\"\n            },\n            {\n                \"type\": \"link\",\n                \"url\": \"  https://ant.design/components/icon-cn/\",\n                \"children\": [\n                    {\n                        \"text\": \"antd官网\"\n                    }\n                ]\n            },\n            {\n                \"text\": \" 点击即可访问\"\n            },\n            {\n                \"type\": \"link\",\n                \"url\": \"  https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\",\n                \"children\": [\n                    {\n                        \"text\": \"\"\n                    }\n                ]\n            },\n            {\n                \"text\": \"\"\n            }\n        ]\n    },\n    {\n        \"children\": [\n            {\n                \"text\": \"\"\n            }\n        ]\n    },\n    {\n        \"children\": [\n            {\n                \"text\": \"\"\n            }\n        ]\n    }\n]\nexport default initRichTexts\n","import React, {useState} from 'react'\nimport './App.css';\nimport EditorSection from \"./EditorSection\";\nimport {Descendant} from 'slate'\nimport {Table, TableProps, Tooltip} from 'antd'\nimport initRichTexts from './init'\n\n\nfunction App() {\n    const [nodes, setNodeList] = useState<Descendant[]>(initRichTexts)\n    if (nodes.length < 1) {\n        // 确保编辑器存在可编辑的区域\n        setNodeList([\n            {\n                children: [{text: ''}]\n            }\n        ])\n    }\n    if (Object.prototype.hasOwnProperty.call(nodes[nodes.length - 1], 'type')) {\n        setNodeList(nodes.concat({\n            children: [{text: ''}]\n        }))\n    }\n    const tableConfig:TableProps<Descendant> = {\n        columns: [\n            {\n                title: '节点类型',\n                dataIndex: 'type',\n                key: 'type',\n                width: 100\n            },\n            {\n                title: '节点value',\n                dataIndex: 'children',\n                key: 'children',\n                width: 100,\n                render: value => (\n                    <Tooltip color={'white'} title={<pre style={{color: 'black'}}>{JSON.stringify(value, null, 2)}</pre>}>\n                        <p style={{width: 100, textOverflow: 'ellipsis', whiteSpace: 'nowrap', overflow: 'hidden'}}>\n                            {JSON.stringify(value)}\n                        </p>\n                    </Tooltip>\n                ),\n            }\n        ],\n        pagination: false,\n        rowKey: () => Math.random(),\n        dataSource: nodes\n    }\n    return (\n    <div className=\"App\">\n        <div className={'node-list'}>\n            <Table {...tableConfig}/>\n        </div>\n        <EditorSection nodes={nodes} setNodeList={setNodeList}/>\n    </div>\n);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}