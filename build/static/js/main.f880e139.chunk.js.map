{"version":3,"sources":["enum/index.ts","Util/index.ts","EditorSection/component/Href.tsx","EditorSection/Leaf.tsx","Util/paragraph.ts","ActionSection/BlockButton.tsx","Plugin/WithHref.ts","ActionSection/ImageButton.tsx","ActionSection/StyleButton.tsx","EditorSection/component/Image.tsx","KeyEvent/index.ts","ActionSection/component/color.ts","ActionSection/component/ColorPicker.tsx","ActionSection/ColorButton.tsx","EditorSection/index.tsx","init.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MARK_TYPE_ENUM","PARAGRAPH_TYPE_ENUM","isUrl","path","trim","test","isMarkActive","editor","type","selection","masks","Editor","marks","switchMark","value","removeMark","addMark","getMark","element","Object","prototype","hasOwnProperty","call","hasType","Href","props","children","leaf","attributes","link","useSlateStatic","Edit","onClick","window","open","ShareAltOutlined","onMouseDown","nodeEntry","nodes","at","entry","node","Text","isText","Transforms","setSelection","anchor","offset","focus","text","length","removeLinkMark","DeleteOutlined","title","placement","color","trigger","href","Leaf","cssProperties","bold","assign","italic","underline","background","style","paragraphChildrenType","Map","set","orderList","listItem","unOrderList","hasParagraphType","key","getParagraphTypes","ans","push","isBlockActive","match","n","isEditor","Element","isElement","BlockButton","icon","useSlate","isType","hasChild","has","unwrapNodes","split","unsetNodes","get","setNodes","wrapNodes","switchBlockType","withHref","insertData","isVoid","normalizeNode","apply","image","data","getData","url","insertNodes","insertHref","operation","concat","ImageButton","useState","setUrl","visible","setVisible","onOk","error","end","insertImage","onCancel","getContainer","placeholder","onChange","e","target","event","preventDefault","StyleButton","ImageBlock","selected","useSelected","focused","useFocused","val","contentEditable","suppressContentEditableWarning","src","alt","maxWidth","maxHeight","boxShadow","AUXILIARY_ENUM","KEY_ENUM","colors","ColorPicker","onColorChange","padding","backgroundColor","display","gridTemplateColumns","gridColumnGap","gridRowGap","map","data-color","width","height","cursor","ColorButton","undefined","setStyle","useEffect","Button","overlay","DownOutlined","buttonsRender","borderBottom","initKeyMap","keyDownHandle","keys","CTRL_KEY","SHIFT_KEY","META_KEY","ALT_KEY","reduce","sum","fn","plugins","withReact","withHistory","EditorSection","setNodeList","useMemo","plugin","createEditor","renderLeaf","useCallback","className","BoldOutlined","fontWeight","ItalicOutlined","fontStyle","UnderlineOutlined","textDecoration","FontColorsOutlined","BgColorsOutlined","OrderedListOutlined","UnorderedListOutlined","CameraOutlined","renderElement","onKeyDown","spellCheck","autoFocus","initRichTexts","App","tableConfig","columns","dataIndex","render","types","JSON","stringify","_","textOverflow","whiteSpace","overflow","pagination","rowKey","Math","random","dataSource","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f880e139.chunk.js","sourcesContent":["export enum MARK_TYPE_ENUM {\n    bold = 'bold',\n    code = 'code',\n    italic = 'italic',\n    underline = 'underline',\n    color = 'color',\n    background = 'background',\n    link = 'link',\n}\n\nexport enum PARAGRAPH_TYPE_ENUM {\n    orderList = 'orderList',\n    listItem = 'listItem',\n    unOrderList = 'unOrderList',\n    image = 'image',\n}\n\n","import {BaseEditor, Editor, Element, Node, Text, Selection, Transforms, BaseElement, BaseText} from 'slate'\nimport {MARK_TYPE_ENUM, PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {message} from 'antd'\nimport {ReactEditor} from 'slate-react'\nimport {CSSProperties} from 'react'\n\nexport const isUrl = (path: string) => {\n    path = path.trim()\n    const reg = /(((^https?:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+(?::\\d+)?|(?:www.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%\\/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[\\w]*))?)$/;\n    return reg.test(path);\n}\n\nexport const isMarkActive = (editor: BaseEditor, type: MARK_TYPE_ENUM) => {\n    if (!editor.selection) return false\n    const masks = Editor.marks(editor)\n    return masks ? masks[type] : false\n}\n\nexport const switchMark = (editor: BaseEditor, type: MARK_TYPE_ENUM, value?: CSSProperties) => {\n    const isType = isMarkActive(editor, type)\n    if (isType) {\n        Editor.removeMark(editor, type)\n    } else {\n        Editor.addMark(editor, type, value)\n    }\n}\n\nexport const insertHref = (editor: ReactEditor, url: string) => {\n    Transforms.insertNodes(editor, [\n        {text: url, link: url},\n        {text: ''}\n    ])\n}\n\nexport const insertImage = (editor: BaseEditor, url: string, selection?: Selection) => {\n    if (!isUrl(url)) {\n        message.error('请输入正确的图片URL')\n        return\n    }\n    // 如果指定了位置就在特定位置插入\n    Transforms.insertNodes(editor, {\n        [PARAGRAPH_TYPE_ENUM.image]: {\n            url,\n        },\n        children: [{text: url}]\n    }, {\n        at: selection || editor.selection || Editor.end(editor, [])\n    })\n}\n\nexport const getMark = (element: BaseText, type: MARK_TYPE_ENUM) => {\n    return Object.prototype.hasOwnProperty.call(element, type)\n}\n\nexport const hasType = (element: BaseElement, type: PARAGRAPH_TYPE_ENUM) => {\n    return Object.prototype.hasOwnProperty.call(element, type)\n}\n","import React from 'react'\nimport {ReactEditor, RenderLeafProps, useSlateStatic} from 'slate-react'\nimport {Button, Tooltip} from 'antd'\nimport {DeleteOutlined, ShareAltOutlined} from '@ant-design/icons'\nimport {BaseSelection, Editor, Text, Range, Node, Transforms} from 'slate'\nimport {getMark} from '../../Util'\nimport {MARK_TYPE_ENUM} from '../../enum'\n\nexport default function Href(props: RenderLeafProps): JSX.Element {\n    let {children, leaf, attributes} = props\n    let {\n        link\n    } = leaf\n    const editor = useSlateStatic() as ReactEditor\n    const removeLinkMark = (selection: BaseSelection) => {\n        if (selection) {\n            const nodeEntry = Editor.nodes(editor, {\n                at: selection\n            })\n            for (const entry of nodeEntry) {\n                const [node, at] = entry\n                if (Text.isText(node) && getMark(node, MARK_TYPE_ENUM.link)){\n                    Transforms.setSelection(editor, {\n                        anchor: {\n                            offset: 0,\n                            path: at,\n                        },\n                        focus: {\n                            offset: node.text.length,\n                            path: at,\n                        }\n                    })\n                    Editor.removeMark(editor, MARK_TYPE_ENUM.link)\n                }\n            }\n        }\n    }\n    const Edit = <>\n        <Button type={'text'} onClick={() => window.open(link)}><ShareAltOutlined />访问</Button>\n        <Button type={'text'} onMouseDown={() => removeLinkMark(editor.selection)}><DeleteOutlined />取消链接</Button>\n    </>\n\n    return <span {...attributes}>\n        <Tooltip title={Edit} placement={'bottom'} color={'white'} trigger={'click'}>\n            <a href={link}>{children}</a>\n        </Tooltip>\n    </span>\n}\n","import React, {CSSProperties} from 'react'\nimport {RenderLeafProps} from 'slate-react'\nimport {MARK_TYPE_ENUM} from '../enum'\nimport Href from './component/Href'\n\n// TODO 应该把link转换成文本节点规避BUG\nexport default function Leaf(props: RenderLeafProps): JSX.Element {\n    let { attributes, children, leaf } = props\n    let cssProperties: CSSProperties = {}\n    if (!children) children = <></>\n    if (leaf[MARK_TYPE_ENUM.bold]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.bold])\n    }\n    if (leaf[MARK_TYPE_ENUM.italic]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.italic])\n    }\n    if (leaf[MARK_TYPE_ENUM.underline]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.underline])\n    }\n    if (leaf[MARK_TYPE_ENUM.color]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.color])\n    }\n    if (leaf[MARK_TYPE_ENUM.background]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.background])\n    }\n    if (leaf.link){\n        // children = <a href={leaf.link}>{children}</a>\n        children = <Href {...props} children={props.children} />\n    }\n\n    return <span {...attributes} style={cssProperties}>{children}</span>\n}\n\n","import {MARK_TYPE_ENUM, PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {getMark, hasType} from './index'\nimport {BaseElement, BaseText} from 'slate'\n\n\nexport const paragraphChildrenType = new Map<PARAGRAPH_TYPE_ENUM, PARAGRAPH_TYPE_ENUM>()\nparagraphChildrenType.set(PARAGRAPH_TYPE_ENUM.orderList, PARAGRAPH_TYPE_ENUM.listItem)\nparagraphChildrenType.set(PARAGRAPH_TYPE_ENUM.unOrderList, PARAGRAPH_TYPE_ENUM.listItem)\n\nexport const hasParagraphType = (node: BaseElement) => {\n    for (const keyValue of paragraphChildrenType) {\n        const key = keyValue[0]\n        if (hasType(node, key as PARAGRAPH_TYPE_ENUM)) return true\n    }\n    return false\n}\n\nexport const getParagraphTypes = (node: BaseElement) => {\n    const ans = []\n    for (const type in PARAGRAPH_TYPE_ENUM) {\n        if (hasType(node, type as PARAGRAPH_TYPE_ENUM)) {\n            ans.push(type)\n        }\n    }\n    return ans\n}\n\nexport const getLeafTypes = (node: BaseText) => {\n    const ans = []\n    for (const type in MARK_TYPE_ENUM) {\n        if (getMark(node, type as MARK_TYPE_ENUM)) {\n            ans.push(type)\n        }\n    }\n    return ans\n}\n","import React from 'react'\nimport {useSlate} from 'slate-react'\nimport {Button} from 'antd'\nimport {PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {BaseEditor, BaseElement, Editor, Element, Transforms} from 'slate'\nimport {hasType} from '../Util'\nimport {hasParagraphType, paragraphChildrenType} from '../Util/paragraph'\n\n\nexport interface IComponentButtonProps {\n    type: PARAGRAPH_TYPE_ENUM,\n    value: object[],\n    icon?: React.ReactNode\n}\n\nconst isBlockActive = (editor: BaseEditor, type: PARAGRAPH_TYPE_ENUM) => {\n    let nodes = Editor.nodes(editor, {\n        match: n => {\n            return !Editor.isEditor(n) && Element.isElement(n) && hasType(n, type)\n        }\n    })\n    for (const nodeElement of nodes) {\n        const node = nodeElement[0]\n        if (Element.isElement(node)) {\n            return hasType(node, type)\n        }\n    }\n    return false\n}\n\n\nconst switchBlockType = (editor: BaseEditor, type: PARAGRAPH_TYPE_ENUM, value: object = {}) => {\n    const isType = isBlockActive(editor, type)\n    const hasChild = paragraphChildrenType.has(type)\n    // 如果是段落组件，就把属性解除\n    Transforms.unwrapNodes(editor, {\n        split: true,\n        match: node => {\n            return !Editor.isEditor(node)\n                && Element.isElement(node)\n                && hasParagraphType(node)\n        }\n    })\n    if (isType) {\n        Transforms.unsetNodes(editor, paragraphChildrenType.get(type) as PARAGRAPH_TYPE_ENUM)\n    } else {\n        if (hasChild) {\n            Transforms.setNodes(editor, {\n                // hasChild属性确保了get函数的返回值\n                [paragraphChildrenType.get(type) as string] : value\n            })\n        } else {\n            Transforms.setNodes(editor, {\n                [type]: value\n            })\n        }\n    }\n    if (!isType && hasChild) {\n        Transforms.wrapNodes(editor, {\n            [type]: value, children: []\n        })\n    }\n\n}\nexport default function BlockButton(props: IComponentButtonProps): JSX.Element {\n    const {\n        type, value, icon\n    } = props\n    const editor = useSlate()\n\n    const mouseDownHandle = () => {\n        if (!editor.selection) return\n        switchBlockType(editor, type, value)\n    }\n    return <>\n        <Button\n            icon={icon}\n            onMouseDown={mouseDownHandle}\n            type={isBlockActive(editor, type) ? 'primary' : 'text'}\n        >\n            {type}\n        </Button>\n    </>\n}\n","import {ReactEditor} from 'slate-react'\nimport {PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {hasType, insertHref, isUrl} from '../Util'\nimport {Element, Text, Transforms} from 'slate'\n\nconst withHref = (editor: ReactEditor) => {\n    const { insertData, isVoid, normalizeNode, apply } = editor\n    editor.isVoid = element => {\n        return hasType(element, PARAGRAPH_TYPE_ENUM.image) ? true : isVoid(element)\n    }\n    editor.insertData = data => {\n        const text = data.getData('text/plain')\n        if (isUrl(text)) {\n            insertHref(editor, text)\n        } else {\n            insertData(data)\n        }\n    }\n    editor.apply = operation => {\n        // console.log(editor.selection, operation)\n        apply(operation)\n        // console.log(editor.selection)\n    }\n\n    editor.normalizeNode = entry => {\n        const [node, path] = entry\n        if (Element.isElement(node) && node.children.length > 1) {\n            if (Text.isText(node.children[0]) && node.children[0].text.length === 0) {\n                //对段落的第一个空节点移除所有的样式\n                normalizeNode(entry)\n                if (!editor.selection) return\n                Transforms.setSelection(editor, {\n                    anchor: {\n                        offset: 0,\n                        path: path.concat(0),\n                    },\n                    focus: {\n                        offset: 0,\n                        path: path.concat(0),\n                    }\n                })\n                return\n            }\n        }\n        normalizeNode(entry)\n    }\n    return editor\n}\nexport default withHref\n","/* eslint-disable */\nimport React, {ReactNode, useState} from 'react'\nimport {Button, Input, message, Modal} from 'antd'\nimport {PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {useSlateStatic} from 'slate-react'\nimport {insertImage, isUrl} from '../Util'\nimport {Selection, Transforms} from 'slate'\n\ninterface IImageButtonProps {\n    type: PARAGRAPH_TYPE_ENUM,\n    icon?: ReactNode\n}\n\nexport default function ImageButton(props: IImageButtonProps): JSX.Element {\n    const {\n        type, icon\n    } = props\n    const editor = useSlateStatic()\n    const [url, setUrl] = useState('')\n    const [visible, setVisible] = useState(false)\n    const [selection, setSelection] = useState<Selection>(null)\n    const mouseDownHandle = (event: React.MouseEvent) => {\n        event.preventDefault()\n        setVisible(true)\n        //缓存selection\n        setSelection(editor.selection)\n    }\n    const onOk = () => {\n        if (!isUrl(url)) {\n            return message.error('请输入正确的图片URL')\n        }\n        insertImage(editor, url, selection || editor.selection)\n        setVisible(false)\n        setUrl('')\n    }\n    return <>\n        <Modal title={'请输入图片url'} visible={visible} onOk={onOk} onCancel={() => setVisible(false)} getContainer={false}>\n            <Input placeholder={'请输入图片url'} onChange={e => {\n                setUrl(e.target.value)}\n            } value={url}/>\n        </Modal>\n        <Button icon={icon} onMouseDown={mouseDownHandle} type={'text'}>{type}</Button>\n    </>\n}\n","import React, {CSSProperties} from 'react'\nimport {useSlate} from 'slate-react'\nimport {BaseEditor, Editor} from 'slate'\nimport {Button} from 'antd'\nimport {MARK_TYPE_ENUM} from '../enum'\nimport {isMarkActive, switchMark} from '../Util'\n\ninterface IStyleButtonProps {\n    type: MARK_TYPE_ENUM,\n    value: CSSProperties,\n    icon?: React.ReactNode\n}\n\nexport default function StyleButton(props: IStyleButtonProps): JSX.Element {\n    const {\n        type, value, icon\n    } = props\n    const editor = useSlate()\n\n    const clickHandle = () => {\n        switchMark(editor, type, value)\n    }\n    return <Button icon={icon} onMouseDown={clickHandle} type={isMarkActive(editor, type) ? 'primary' : 'text'}>\n        {type}\n    </Button>\n}\n\n","import React from 'react'\nimport {RenderElementProps, useFocused, useSelected} from 'slate-react'\nimport {PARAGRAPH_TYPE_ENUM} from '../../enum'\n\nexport function ImageBlock (props: RenderElementProps): JSX.Element {\n    let {\n        element, attributes, children\n    } = props\n    const selected = useSelected()\n    const focused = useFocused()\n    const val = element[PARAGRAPH_TYPE_ENUM.image]\n    return <span {...attributes}>\n        <span contentEditable={'false'} suppressContentEditableWarning={true}>\n            <img src={val && val.url} alt=\"图片\" style={{\n                maxWidth: '100%', maxHeight: '20em', boxShadow: `${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'}`\n            }}/>\n        </span>\n        {children}\n    </span>\n}\n","import {KeyboardEvent} from 'react'\nimport {Editor, Range, Text, Element, Selection, BaseText, Transforms} from 'slate'\nimport {ReactEditor} from 'slate-react'\n\n\nenum AUXILIARY_ENUM {\n    ALT_KEY = 'altKey',\n    SHIFT_KEY = 'shiftKey',\n    CTRL_KEY = 'ctrlKey',\n    META_KEY= 'metaKey'\n}\nenum KEY_ENUM {\n    ENTER = 'Enter',\n    DEL = 'Backspace'\n}\n\nconst initKeyMap = new Map<any, (editor: ReactEditor, event: KeyboardEvent) => boolean>()\nconst keyDownHandle = (event: KeyboardEvent, editor: ReactEditor) => {\n    const assistKeys = [AUXILIARY_ENUM.CTRL_KEY, AUXILIARY_ENUM.SHIFT_KEY, AUXILIARY_ENUM.META_KEY, AUXILIARY_ENUM.ALT_KEY]\n    const keys = assistKeys.reduce((sum, key) => {\n        return sum + (event[key] ? key : '')\n    }, '')\n    if (initKeyMap.has(keys + event.key)) {\n        const fn = initKeyMap.get(keys + event.key)\n        const flag = fn && fn(editor, event)\n        if (flag) event.preventDefault()\n    }\n}\nexport default keyDownHandle\n","export const colors = [\"rgb(0, 0, 0)\", \"rgb(38, 38, 38)\", \"rgb(89, 89, 89)\", \"rgb(140, 140, 140)\", \"rgb(191, 191, 191)\", \"rgb(217, 217, 217)\", \"rgb(233, 233, 233)\", \"rgb(245, 245, 245)\", \"rgb(250, 250, 250)\", \"rgb(255, 255, 255)\", \"rgb(245, 34, 45)\", \"rgb(250, 84, 28)\", \"rgb(250, 140, 22)\", \"rgb(250, 219, 20)\", \"rgb(82, 196, 26)\", \"rgb(19, 194, 194)\", \"rgb(24, 144, 255)\", \"rgb(47, 84, 235)\", \"rgb(114, 46, 209)\", \"rgb(235, 47, 150)\", \"rgb(255, 232, 230)\", \"rgb(255, 236, 224)\", \"rgb(255, 239, 209)\", \"rgb(252, 252, 202)\", \"rgb(228, 247, 210)\", \"rgb(211, 245, 240)\", \"rgb(212, 238, 252)\", \"rgb(222, 232, 252)\", \"rgb(239, 225, 250)\", \"rgb(250, 225, 235)\", \"rgb(255, 163, 158)\", \"rgb(255, 187, 150)\", \"rgb(255, 213, 145)\", \"rgb(255, 251, 143)\", \"rgb(183, 235, 143)\", \"rgb(135, 232, 222)\", \"rgb(145, 213, 255)\", \"rgb(173, 198, 255)\", \"rgb(211, 173, 247)\", \"rgb(255, 173, 210)\", \"rgb(255, 77, 79)\", \"rgb(255, 122, 69)\", \"rgb(255, 169, 64)\", \"rgb(255, 236, 61)\", \"rgb(115, 209, 61)\", \"rgb(54, 207, 201)\", \"rgb(64, 169, 255)\", \"rgb(89, 126, 247)\", \"rgb(146, 84, 222)\", \"rgb(247, 89, 171)\", \"rgb(207, 19, 34)\", \"rgb(212, 56, 13)\", \"rgb(212, 107, 8)\", \"rgb(212, 177, 6)\", \"rgb(56, 158, 13)\", \"rgb(8, 151, 156)\", \"rgb(9, 109, 217)\", \"rgb(29, 57, 196)\", \"rgb(83, 29, 171)\", \"rgb(196, 29, 127)\", \"rgb(130, 0, 20)\", \"rgb(135, 20, 0)\", \"rgb(135, 56, 0)\", \"rgb(97, 71, 0)\", \"rgb(19, 82, 0)\", \"rgb(0, 71, 79)\", \"rgb(0, 58, 140)\", \"rgb(6, 17, 120)\", \"rgb(34, 7, 94)\", \"rgb(120, 6, 80)\"]\n","import React from 'react'\nimport {colors} from './color'\ninterface IColorPicker {\n    onColorChange: (color: string, e: React.MouseEvent) => void\n}\nexport default function ColorPicker(props: IColorPicker): JSX.Element {\n    const {\n        onColorChange\n    } = props\n    return <div style={{\n        padding: 10, backgroundColor: 'white', boxShadow: '0 2px 10px rgb(0 0 0 / 12%)',\n    }}>\n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(10, 30px)`,\n            gridColumnGap: 5,\n            gridRowGap: 5\n        }}>\n            {\n                colors.map(color => {\n                    return <span key={color}\n                                 data-color={color}\n                                 onMouseDown={(e) => onColorChange(color, e)}\n                                 style={{\n                                     width: 20, height: 20, backgroundColor: color, display: 'inline-block', cursor: 'pointer'\n                                 }}\n                    />\n                })\n            }\n        </div>\n    </div>\n}\n","import React, {CSSProperties, useEffect, useState} from 'react'\nimport {MARK_TYPE_ENUM} from '../enum'\nimport {Button, Dropdown} from 'antd'\nimport {useSlate} from 'slate-react'\nimport {Editor} from 'slate'\nimport {DownOutlined} from '@ant-design/icons'\nimport ColorPicker from './component/ColorPicker'\nimport {switchMark} from '../Util'\ninterface IColorButtonProps {\n    type: MARK_TYPE_ENUM.color | MARK_TYPE_ENUM.background,\n    icon?: React.ReactNode\n}\nexport default function ColorButton(props: IColorButtonProps): JSX.Element {\n    const {\n        type, icon\n    } = props\n    const editor = useSlate()\n    const [style, setStyle] = useState<CSSProperties | undefined>(undefined)\n\n    useEffect(() => {\n        if (editor.selection) {\n            const masks = Editor.marks(editor)\n            if (masks && masks[type]) {\n                setStyle(masks[type])\n            } else {\n                setStyle(undefined)\n            }\n        }\n    }, [editor, editor.selection, type])\n\n    const colorPickChangeHandle = (color: string, e: React.MouseEvent) => {\n        if (editor.selection) {\n            switchMark(editor, type, {\n                [type]: color\n            })\n        }\n    }\n\n    return <Dropdown.Button\n        overlay={<ColorPicker onColorChange={colorPickChangeHandle} />}\n        icon={<DownOutlined />}\n        placement={'bottomRight'}\n        buttonsRender={() => [\n            <Button icon={icon} type={'text'} onMouseDown={() => switchMark(editor, type)} style={{\n                borderBottom: style ? `2px solid ${style[type]}` : ''\n            }}>\n                {type}\n            </Button>,\n            <Button type={'text'} icon={<DownOutlined />} />\n        ]}\n    />\n}\n","import React, {useCallback, useMemo} from 'react'\nimport {Editable, ReactEditor, RenderElementProps, RenderLeafProps, Slate, withReact} from 'slate-react'\nimport {createEditor, Descendant} from 'slate'\nimport Leaf from './Leaf'\nimport {MARK_TYPE_ENUM, PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {\n    BgColorsOutlined,\n    BoldOutlined, CameraOutlined,\n    FontColorsOutlined,\n    ItalicOutlined,\n    OrderedListOutlined,\n    UnderlineOutlined, UnorderedListOutlined\n} from '@ant-design/icons'\nimport BlockButton from '../ActionSection/BlockButton'\nimport {withHistory} from 'slate-history'\nimport withHref from '../Plugin/WithHref'\nimport ImageButton from '../ActionSection/ImageButton'\nimport StyleButton from '../ActionSection/StyleButton'\nimport {ImageBlock} from './component/Image'\nimport ColorButton from '../ActionSection/ColorButton'\nimport keyDownHandle from '../KeyEvent'\n\nconst plugins = [\n    withReact,\n    withHistory,\n    withHref\n]\n\nexport default function EditorSection (props: {nodes: Descendant[], setNodeList:(value: Descendant[]) => void}) {\n    const {\n        nodes, setNodeList\n    } = props\n    const editor = useMemo(() => {\n        return plugins.reduce((editor, plugin) => {\n            return plugin(editor)\n        }, createEditor() as ReactEditor)\n    }, [])\n\n    const render = (props: RenderElementProps):JSX.Element => {\n        let {\n            element, attributes, children\n        } = props\n        if (element[PARAGRAPH_TYPE_ENUM.orderList]) {\n            children = <ol {...attributes}>{children}</ol>\n        } else if (element[PARAGRAPH_TYPE_ENUM.unOrderList]) {\n            children = <ul {...attributes}>{children}</ul>\n        } else if (element[PARAGRAPH_TYPE_ENUM.listItem]) {\n            children = <li {...attributes}>{children}</li>\n        } else if (element[PARAGRAPH_TYPE_ENUM.image]) {\n            children = <ImageBlock {...props} children={props.children}/>\n        } else {\n            children = <div {...attributes}>{children}</div>\n        }\n        return children\n    }\n    const renderLeaf = useCallback((props:RenderLeafProps) => {\n        return <Leaf {...props} children={props.children}/>\n    }, [])\n\n    return <div className={'slate-editor'}>\n        <Slate value={nodes} editor={editor} onChange={setNodeList}>\n            <StyleButton icon={<BoldOutlined />} type={MARK_TYPE_ENUM.bold} value={{fontWeight: 'bold'}}/>\n            <StyleButton icon={<ItalicOutlined />} type={MARK_TYPE_ENUM.italic} value={{fontStyle: 'oblique'}}/>\n            <StyleButton icon={<UnderlineOutlined />} type={MARK_TYPE_ENUM.underline} value={{textDecoration: 'underline'}}/>\n            <ColorButton type={MARK_TYPE_ENUM.color} icon={<FontColorsOutlined />} />\n            <ColorButton type={MARK_TYPE_ENUM.background} icon={<BgColorsOutlined />} />\n            <BlockButton icon={<OrderedListOutlined />} type={PARAGRAPH_TYPE_ENUM.orderList} value={[]} />\n            <BlockButton icon={<UnorderedListOutlined />} type={PARAGRAPH_TYPE_ENUM.unOrderList} value={[]} />\n            <ImageButton icon={<CameraOutlined />} type={PARAGRAPH_TYPE_ENUM.image} />\n            <hr/>\n            <Editable\n                renderElement={render}\n                renderLeaf={renderLeaf}\n                onKeyDown={event => keyDownHandle(event, editor)}\n                placeholder=\"rich demo\"\n                spellCheck\n                autoFocus\n            />\n        </Slate>\n    </div>\n}\n","import {Descendant} from 'slate'\n\nconst initRichTexts: Descendant[] = [\n    {\n        \"children\": [\n            {\n                \"text\": \"使用Slate + TypeScript + React Hook + Antd实现的数据驱动的富文本编辑器，暂时不支持代码高亮，使用类似Virtual Dom的机制和思想去实现编辑器功能.扩展性将更好\"\n            }\n        ]\n    },\n    {\n        \"image\": {\n            \"url\": \"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\"\n        },\n        \"children\": [\n            {\n                \"text\": \"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\"\n            }\n        ]\n    },\n    {\n        \"orderList\": [],\n        \"children\": [\n            {\n                \"children\": [\n                    {\n                        \"text\": \"有顺序列表\"\n                    }\n                ],\n                \"listItem\": []\n            },\n            {\n                \"children\": [\n                    {\n                        \"text\": \"有顺序列表加粗样式\",\n                        \"bold\": {\n                            \"fontWeight\": \"bold\"\n                        }\n                    }\n                ],\n                \"listItem\": []\n            }\n        ]\n    },\n    {\n        \"children\": [\n            {\n                \"bold\": {\n                    \"fontWeight\": \"bold\"\n                },\n                \"text\": \"\"\n            }\n        ]\n    },\n    {\n        \"unOrderList\": [],\n        \"children\": [\n            {\n                \"children\": [\n                    {\n                        \"text\": \"无顺序列表\",\n                        \"italic\": {\n                            \"fontStyle\": \"oblique\"\n                        }\n                    }\n                ],\n                \"listItem\": []\n            },\n            {\n                \"children\": [\n                    {\n                        \"italic\": {\n                            \"fontStyle\": \"oblique\"\n                        },\n                        \"text\": \"无顺序列表加颜色\",\n                        \"color\": {\n                            \"color\": \"rgb(235, 47, 150)\"\n                        }\n                    }\n                ],\n                \"listItem\": []\n            }\n        ]\n    }\n]\nexport default initRichTexts\n","import React, {useState} from 'react'\nimport './App.css';\nimport EditorSection from \"./EditorSection\";\nimport {Descendant, Element} from 'slate'\nimport {Table, TableProps, Tooltip} from 'antd'\nimport initRichTexts from './init'\nimport {getParagraphTypes, hasParagraphType} from './Util/paragraph'\n\n\nfunction App() {\n    const [nodes, setNodeList] = useState<Descendant[]>(initRichTexts)\n    if (nodes.length < 1) {\n        // 确保编辑器存在可编辑的区域\n        setNodeList([\n            {\n                children: [{text: ''}]\n            }\n        ])\n    }\n    if (getParagraphTypes(nodes[nodes.length - 1] as Element).length) {\n        setNodeList(nodes.concat({\n            children: [{text: ''}]\n        }))\n    }\n    const tableConfig:TableProps<Descendant> = {\n        columns: [\n            {\n                title: '节点类型',\n                dataIndex: 'type',\n                key: 'type',\n                width: 100,\n                render(val, data) {\n                    const types = Element.isElement(data) ? getParagraphTypes(data) : []\n                    return JSON.stringify(types)\n                }\n            },\n            {\n                title: '节点value',\n                dataIndex: 'children',\n                key: 'children',\n                width: 100,\n                render: (_, data) => (\n                    <Tooltip color={'white'} title={<pre style={{color: 'black'}}>{JSON.stringify(data, null, 2)}</pre>}>\n                        <p style={{width: 100, textOverflow: 'ellipsis', whiteSpace: 'nowrap', overflow: 'hidden'}}>\n                            {JSON.stringify(data)}\n                        </p>\n                    </Tooltip>\n                ),\n            }\n        ],\n        pagination: false,\n        rowKey: () => Math.random(),\n        dataSource: nodes\n    }\n    return (\n    <div className=\"App\">\n        <div className={'node-list'}>\n            <Table {...tableConfig}/>\n        </div>\n        <EditorSection nodes={nodes} setNodeList={setNodeList}/>\n    </div>\n);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}