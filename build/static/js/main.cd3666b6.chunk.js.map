{"version":3,"sources":["enum/index.ts","Util/index.ts","Util/paragraph.ts","ActionSection/BlockButton.tsx","ActionSection/component/color.ts","ActionSection/component/ColorPicker.tsx","ActionSection/ColorButton.tsx","KeyEvent/index.ts","ActionSection/ImageButton.tsx","ActionSection/StyleButton.tsx","Plugin/WithHref.ts","EditorSection/component/Href.tsx","EditorSection/component/Image.tsx","EditorSection/Leaf.tsx","EditorSection/index.tsx","init.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MARK_TYPE_ENUM","PARAGRAPH_TYPE_ENUM","PARAGRAPH_TYPE_LIST","key","push","isUrl","path","trim","test","isMarkActive","editor","type","selection","masks","Editor","marks","switchMark","value","removeMark","addMark","hasType","element","Array","some","item","Object","prototype","hasOwnProperty","call","paragraphChildrenType","Map","set","orderList","listItem","unOrderList","hasListType","node","getParagraphTypes","ans","isBlockActive","nodes","match","n","isEditor","Element","isElement","BlockButton","props","icon","useSlate","onMouseDown","isType","hasChild","has","Transforms","unwrapNodes","split","unsetNodes","get","setNodes","wrapNodes","switchBlockType","colors","ColorPicker","onColorChange","style","padding","backgroundColor","boxShadow","display","gridTemplateColumns","gridColumnGap","gridRowGap","map","color","data-color","e","width","height","cursor","ColorButton","useState","undefined","setStyle","useEffect","Button","overlay","DownOutlined","placement","buttonsRender","borderBottom","AUXILIARY_ENUM","ImageButton","useSlateStatic","url","setUrl","visible","setVisible","setSelection","title","onOk","error","insertNodes","image","text","at","end","insertImage","onCancel","getContainer","placeholder","onChange","target","event","preventDefault","StyleButton","initKeyMap","keyDownHandle","keys","CTRL_KEY","SHIFT_KEY","META_KEY","ALT_KEY","reduce","sum","fn","withHref","insertData","isVoid","normalizeNode","isInline","apply","link","data","getData","children","insertHref","operation","entry","length","Text","isText","anchor","offset","concat","focus","Href","attributes","console","linkData","modalConfig","document","body","destroyOnClose","values","form","getFieldsValue","parent","withoutNormalizing","delete","useForm","Edit","className","EditOutlined","onClick","window","open","ShareAltOutlined","removeLinkMark","DeleteOutlined","trigger","initialValues","Item","label","name","ImageBlock","selected","useSelected","focused","useFocused","val","contentEditable","suppressContentEditableWarning","src","alt","maxWidth","maxHeight","Leaf","leaf","cssProperties","bold","assign","italic","underline","background","plugins","withReact","withHistory","EditorSection","setNodeList","useMemo","plugin","createEditor","renderLeaf","useCallback","log","BoldOutlined","fontWeight","ItalicOutlined","fontStyle","UnderlineOutlined","textDecoration","FontColorsOutlined","BgColorsOutlined","OrderedListOutlined","UnorderedListOutlined","CameraOutlined","renderElement","onKeyDown","spellCheck","autoFocus","initRichTexts","App","tableConfig","columns","dataIndex","render","types","JSON","stringify","_","textOverflow","whiteSpace","overflow","pagination","rowKey","Math","random","dataSource","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.cd3666b6.chunk.js","sourcesContent":["export enum MARK_TYPE_ENUM {\n    bold = 'bold',\n    code = 'code',\n    italic = 'italic',\n    underline = 'underline',\n    color = 'color',\n    background = 'background',\n}\n\nexport enum PARAGRAPH_TYPE_ENUM {\n    orderList = 'orderList',\n    listItem = 'listItem',\n    unOrderList = 'unOrderList',\n    image = 'image',\n    link = 'link',\n}\n\nconst PARAGRAPH_TYPE_LIST: string[] = []\nfor (let key in PARAGRAPH_TYPE_ENUM) {\n    PARAGRAPH_TYPE_LIST.push(key)\n}\nexport {\n    PARAGRAPH_TYPE_LIST\n}\n\n","import { message } from 'antd'\nimport { CSSProperties } from 'react'\nimport { BaseEditor, BaseElement, BaseText, Editor, Selection, Transforms } from 'slate'\nimport { ReactEditor } from 'slate-react'\n\nimport { MARK_TYPE_ENUM, PARAGRAPH_TYPE_ENUM } from '../enum'\n\nexport const isUrl = (path: string) => {\n    path = path.trim()\n    const reg = /(((^https?:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+(?::\\d+)?|(?:www.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%\\/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[\\w]*))?)$/;\n    return reg.test(path);\n}\n\nexport const isMarkActive = (editor: BaseEditor, type: MARK_TYPE_ENUM) => {\n    if (!editor.selection) return false\n    const masks = Editor.marks(editor)\n    return masks ? masks[type] : false\n}\n\nexport const switchMark = (editor: BaseEditor, type: MARK_TYPE_ENUM, value?: CSSProperties) => {\n    const isType = isMarkActive(editor, type)\n    if (isType) {\n        Editor.removeMark(editor, type)\n    } else {\n        Editor.addMark(editor, type, value)\n    }\n}\n\nexport const insertHref = (editor: ReactEditor, url: string) => {\n    Transforms.insertNodes(editor, [\n        { link: { url, text: url }, children: [ { text: '' } ] },\n    ])\n}\n\nexport const insertImage = (editor: BaseEditor, url: string, selection?: Selection) => {\n    if (!isUrl(url)) {\n        message.error('请输入正确的图片URL')\n        return\n    }\n    // 如果指定了位置就在特定位置插入\n    Transforms.insertNodes(editor, [\n        {\n            [PARAGRAPH_TYPE_ENUM.image]: {\n                url,\n            },\n            children: [{ text: url }]\n        },\n    ], {\n        at: selection || editor.selection || Editor.end(editor, [])\n    })\n}\n\nexport const getMark = (element: BaseText, type: MARK_TYPE_ENUM) => {\n    return Object.prototype.hasOwnProperty.call(element, type)\n}\n\nexport const hasType = (element: BaseElement, type: string | string[]) => {\n    if (type instanceof Array) {\n        return type.some(item => Object.prototype.hasOwnProperty.call(element, item))\n    } else {\n       return Object.prototype.hasOwnProperty.call(element, type)\n    }\n}\n\n","import { BaseElement, BaseText } from 'slate'\n\nimport { MARK_TYPE_ENUM, PARAGRAPH_TYPE_ENUM } from '../enum'\nimport { getMark, hasType } from './index'\n\n\nexport const paragraphChildrenType = new Map<PARAGRAPH_TYPE_ENUM, PARAGRAPH_TYPE_ENUM>()\nparagraphChildrenType.set(PARAGRAPH_TYPE_ENUM.orderList, PARAGRAPH_TYPE_ENUM.listItem)\nparagraphChildrenType.set(PARAGRAPH_TYPE_ENUM.unOrderList, PARAGRAPH_TYPE_ENUM.listItem)\n\nexport const hasListType = (node: BaseElement) => {\n    for (const keyValue of paragraphChildrenType) {\n        const key = keyValue[0]\n        if (hasType(node, key as PARAGRAPH_TYPE_ENUM)) return true\n    }\n    return false\n}\n\nexport const getParagraphTypes = (node: BaseElement) => {\n    const ans: string[] = []\n    for (const type in PARAGRAPH_TYPE_ENUM) {\n        if (hasType(node, type as PARAGRAPH_TYPE_ENUM)) {\n            ans.push(type)\n        }\n    }\n    return ans\n}\n\nexport const getLeafTypes = (node: BaseText) => {\n    const ans: string[] = []\n    for (const type in MARK_TYPE_ENUM) {\n        if (getMark(node, type as MARK_TYPE_ENUM)) {\n            ans.push(type)\n        }\n    }\n    return ans\n}\n","import { Button } from 'antd'\nimport React from 'react'\nimport { BaseEditor, Editor, Element, Transforms } from 'slate'\nimport { useSlate } from 'slate-react'\n\nimport { PARAGRAPH_TYPE_ENUM } from '../enum'\nimport { hasType } from '../Util'\nimport { hasListType, paragraphChildrenType } from '../Util/paragraph'\n\n\nexport interface IComponentButtonProps {\n    type: PARAGRAPH_TYPE_ENUM,\n    value: object[],\n    icon?: React.ReactNode\n}\n\nconst isBlockActive = (editor: BaseEditor, type: PARAGRAPH_TYPE_ENUM) => {\n    let nodes = Editor.nodes(editor, {\n        match: n => {\n            return !Editor.isEditor(n) && Element.isElement(n) && hasType(n, type)\n        }\n    })\n    for (const nodeElement of nodes) {\n        const node = nodeElement[0]\n        if (Element.isElement(node)) {\n            return hasType(node, type)\n        }\n    }\n    return false\n}\n\n\nconst switchBlockType = (editor: BaseEditor, type: PARAGRAPH_TYPE_ENUM, value: object = {}) => {\n    const isType = isBlockActive(editor, type)\n    const hasChild = paragraphChildrenType.has(type)\n    // 如果是列表组件，就把属性解除\n    Transforms.unwrapNodes(editor, {\n        split: true,\n        match: node => {\n            return !Editor.isEditor(node)\n                && Element.isElement(node)\n                && hasListType(node)\n        }\n    })\n    if (isType) {\n        Transforms.unsetNodes(editor, paragraphChildrenType.get(type) as PARAGRAPH_TYPE_ENUM)\n    } else {\n        if (hasChild) {\n            Transforms.setNodes(editor, {\n                // hasChild属性确保了get函数的返回值\n                [paragraphChildrenType.get(type) as string] : value\n            })\n        } else {\n            Transforms.setNodes(editor, {\n                [type]: value\n            })\n        }\n    }\n    if (!isType && hasChild) {\n        Transforms.wrapNodes(editor, {\n            [type]: value, children: []\n        })\n    }\n\n}\nexport default function BlockButton(props: IComponentButtonProps): JSX.Element {\n    const {\n        type, value, icon\n    } = props\n    const editor = useSlate()\n\n    const mouseDownHandle = () => {\n        if (!editor.selection) return\n        switchBlockType(editor, type, value)\n    }\n    return <>\n        <Button\n            icon={icon}\n            onMouseDown={mouseDownHandle}\n            type={isBlockActive(editor, type) ? 'primary' : 'text'}\n        >\n            {type}\n        </Button>\n    </>\n}\n","export const colors = ['rgb(0, 0, 0)', 'rgb(38, 38, 38)', 'rgb(89, 89, 89)', 'rgb(140, 140, 140)', 'rgb(191, 191, 191)', 'rgb(217, 217, 217)', 'rgb(233, 233, 233)', 'rgb(245, 245, 245)', 'rgb(250, 250, 250)', 'rgb(255, 255, 255)', 'rgb(245, 34, 45)', 'rgb(250, 84, 28)', 'rgb(250, 140, 22)', 'rgb(250, 219, 20)', 'rgb(82, 196, 26)', 'rgb(19, 194, 194)', 'rgb(24, 144, 255)', 'rgb(47, 84, 235)', 'rgb(114, 46, 209)', 'rgb(235, 47, 150)', 'rgb(255, 232, 230)', 'rgb(255, 236, 224)', 'rgb(255, 239, 209)', 'rgb(252, 252, 202)', 'rgb(228, 247, 210)', 'rgb(211, 245, 240)', 'rgb(212, 238, 252)', 'rgb(222, 232, 252)', 'rgb(239, 225, 250)', 'rgb(250, 225, 235)', 'rgb(255, 163, 158)', 'rgb(255, 187, 150)', 'rgb(255, 213, 145)', 'rgb(255, 251, 143)', 'rgb(183, 235, 143)', 'rgb(135, 232, 222)', 'rgb(145, 213, 255)', 'rgb(173, 198, 255)', 'rgb(211, 173, 247)', 'rgb(255, 173, 210)', 'rgb(255, 77, 79)', 'rgb(255, 122, 69)', 'rgb(255, 169, 64)', 'rgb(255, 236, 61)', 'rgb(115, 209, 61)', 'rgb(54, 207, 201)', 'rgb(64, 169, 255)', 'rgb(89, 126, 247)', 'rgb(146, 84, 222)', 'rgb(247, 89, 171)', 'rgb(207, 19, 34)', 'rgb(212, 56, 13)', 'rgb(212, 107, 8)', 'rgb(212, 177, 6)', 'rgb(56, 158, 13)', 'rgb(8, 151, 156)', 'rgb(9, 109, 217)', 'rgb(29, 57, 196)', 'rgb(83, 29, 171)', 'rgb(196, 29, 127)', 'rgb(130, 0, 20)', 'rgb(135, 20, 0)', 'rgb(135, 56, 0)', 'rgb(97, 71, 0)', 'rgb(19, 82, 0)', 'rgb(0, 71, 79)', 'rgb(0, 58, 140)', 'rgb(6, 17, 120)', 'rgb(34, 7, 94)', 'rgb(120, 6, 80)']\n","import React from 'react'\n\nimport { colors } from './color'\ninterface IColorPicker {\n    onColorChange: (color: string, e: React.MouseEvent) => void\n}\nexport default function ColorPicker(props: IColorPicker): JSX.Element {\n    const {\n        onColorChange\n    } = props\n    return <div style={{\n        padding: 10, backgroundColor: 'white', boxShadow: '0 2px 10px rgb(0 0 0 / 12%)',\n    }}>\n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(10, 30px)`,\n            gridColumnGap: 5,\n            gridRowGap: 5\n        }}>\n            {\n                colors.map(color => {\n                    return <span key={color}\n                                 data-color={color}\n                                 onMouseDown={(e) => onColorChange(color, e)}\n                                 style={{\n                                     width: 20, height: 20, backgroundColor: color, display: 'inline-block', cursor: 'pointer'\n                                 }}\n                    />\n                })\n            }\n        </div>\n    </div>\n}\n","import { DownOutlined } from '@ant-design/icons'\nimport { Button, Dropdown } from 'antd'\nimport React, { CSSProperties, useEffect, useState } from 'react'\nimport { Editor } from 'slate'\nimport { useSlate } from 'slate-react'\n\nimport { MARK_TYPE_ENUM } from '../enum'\nimport { switchMark } from '../Util'\nimport ColorPicker from './component/ColorPicker'\ninterface IColorButtonProps {\n    type: MARK_TYPE_ENUM.color | MARK_TYPE_ENUM.background,\n    icon?: React.ReactNode\n}\nexport default function ColorButton(props: IColorButtonProps): JSX.Element {\n    const {\n        type, icon\n    } = props\n    const editor = useSlate()\n    const [style, setStyle] = useState<CSSProperties | undefined>(undefined)\n\n    useEffect(() => {\n        if (editor.selection) {\n            const masks = Editor.marks(editor)\n            if (masks && masks[type]) {\n                setStyle(masks[type])\n            } else {\n                setStyle(undefined)\n            }\n        }\n    }, [editor, editor.selection, type])\n\n    const colorPickChangeHandle = (color: string, e: React.MouseEvent) => {\n        if (editor.selection) {\n            switchMark(editor, type, {\n                [type]: color\n            })\n        }\n    }\n\n    return <Dropdown.Button\n        overlay={<ColorPicker onColorChange={colorPickChangeHandle} />}\n        icon={<DownOutlined />}\n        placement={'bottomRight'}\n        buttonsRender={() => [\n            <Button icon={icon} type={'text'} onMouseDown={() => switchMark(editor, type)} style={{\n                borderBottom: style ? `2px solid ${style[type]}` : ''\n            }}>\n                {type}\n            </Button>,\n            <Button type={'text'} icon={<DownOutlined />} />\n        ]}\n    />\n}\n","import { KeyboardEvent } from 'react'\nimport { ReactEditor } from 'slate-react'\n\n\nenum AUXILIARY_ENUM {\n    ALT_KEY = 'altKey',\n    SHIFT_KEY = 'shiftKey',\n    CTRL_KEY = 'ctrlKey',\n    META_KEY= 'metaKey'\n}\n\nconst initKeyMap = new Map<any, (editor: ReactEditor, event: KeyboardEvent) => boolean>()\nconst keyDownHandle = (event: KeyboardEvent, editor: ReactEditor) => {\n    const assistKeys = [AUXILIARY_ENUM.CTRL_KEY, AUXILIARY_ENUM.SHIFT_KEY, AUXILIARY_ENUM.META_KEY, AUXILIARY_ENUM.ALT_KEY]\n    const keys = assistKeys.reduce((sum, key) => {\n        return sum + (event[key] ? key : '')\n    }, '')\n    if (initKeyMap.has(keys + event.key)) {\n        const fn = initKeyMap.get(keys + event.key)\n        const flag = fn && fn(editor, event)\n        if (flag) event.preventDefault()\n    }\n}\nexport default keyDownHandle\n","/* eslint-disable */\nimport {Button, Input, message, Modal} from 'antd'\nimport React, {ReactNode, useState} from 'react'\nimport {Selection} from 'slate'\nimport {useSlateStatic} from 'slate-react'\nimport {PARAGRAPH_TYPE_ENUM} from '../enum'\nimport {insertImage, isUrl} from '../Util'\n\ninterface IImageButtonProps {\n    type: PARAGRAPH_TYPE_ENUM,\n    icon?: ReactNode\n}\n\nexport default function ImageButton(props: IImageButtonProps): JSX.Element {\n    const {\n        type, icon\n    } = props\n    const editor = useSlateStatic()\n    const [url, setUrl] = useState('')\n    const [visible, setVisible] = useState(false)\n    const [selection, setSelection] = useState<Selection>(null)\n    const mouseDownHandle = (event: React.MouseEvent) => {\n        event.preventDefault()\n        setVisible(true)\n        //缓存selection\n        setSelection(editor.selection)\n    }\n    const onOk = () => {\n        if (!isUrl(url)) {\n            return message.error('请输入正确的图片URL')\n        }\n        insertImage(editor, url, selection || editor.selection)\n        setVisible(false)\n        setUrl('')\n    }\n    return <>\n        <Modal title={'请输入图片url'} visible={visible} onOk={onOk} onCancel={() => setVisible(false)} getContainer={false}>\n            <Input placeholder={'请输入图片url'} onChange={e => {\n                setUrl(e.target.value)}\n            } value={url}/>\n        </Modal>\n        <Button icon={icon} onMouseDown={mouseDownHandle} type={'text'}>{type}</Button>\n    </>\n}\n","import { Button } from 'antd'\nimport React, { CSSProperties } from 'react'\nimport { useSlate } from 'slate-react'\n\nimport { MARK_TYPE_ENUM } from '../enum'\nimport { isMarkActive, switchMark } from '../Util'\n\ninterface IStyleButtonProps {\n    type: MARK_TYPE_ENUM,\n    value: CSSProperties,\n    icon?: React.ReactNode\n}\n\nexport default function StyleButton(props: IStyleButtonProps): JSX.Element {\n    const {\n        type, value, icon\n    } = props\n    const editor = useSlate()\n\n    const clickHandle = () => {\n        switchMark(editor, type, value)\n    }\n    return <Button icon={icon} onMouseDown={clickHandle} type={isMarkActive(editor, type) ? 'primary' : 'text'}>\n        {type}\n    </Button>\n}\n\n","import { Element, Text, Transforms } from 'slate'\nimport { ReactEditor } from 'slate-react'\n\nimport { PARAGRAPH_TYPE_ENUM } from '../enum'\nimport { hasType, insertHref, isUrl } from '../Util'\n\n\nconst withHref = <T extends ReactEditor>(editor: T) => {\n    const { insertData, isVoid, normalizeNode, isInline, apply } = editor\n    editor.isVoid = element => {\n        return hasType(element, [\n            PARAGRAPH_TYPE_ENUM.image,\n            PARAGRAPH_TYPE_ENUM.link,\n        ]) ? true : isVoid(element)\n    }\n    editor.isInline = element => {\n        return hasType(element, [\n            PARAGRAPH_TYPE_ENUM.link,\n        ]) ? true : isInline(element)\n    }\n    editor.insertData = data => {\n        const text = data.getData('text/plain')\n        if (isUrl(text)) {\n            insertHref(editor, text)\n        } else {\n            insertData(data)\n        }\n    }\n    editor.apply = operation => {\n        apply(operation)\n    }\n\n    editor.normalizeNode = entry => {\n        const [node, path] = entry\n        if (Element.isElement(node) && node.children.length > 1) {\n            if (Text.isText(node.children[0]) && node.children[0].text.length === 0) {\n                //对段落的第一个空节点移除所有的样式\n                normalizeNode(entry)\n                if (!editor.selection) return\n                Transforms.setSelection(editor, {\n                    anchor: {\n                        offset: 0,\n                        path: path.concat(0),\n                    },\n                    focus: {\n                        offset: 0,\n                        path: path.concat(0),\n                    }\n                })\n                return\n            }\n        }\n        normalizeNode(entry)\n    }\n    return editor\n}\nexport default withHref\n","import { DeleteOutlined, EditOutlined, ShareAltOutlined } from '@ant-design/icons'\nimport { Button, Form, Input, Modal, Tooltip } from 'antd'\nimport { useForm } from 'antd/es/form/Form.js'\nimport React, { useState } from 'react'\nimport { BaseSelection, Editor, Selection, Transforms } from 'slate'\nimport { ReactEditor, RenderElementProps, useSlate } from 'slate-react'\n\nimport { IHrefProps } from '../../@types/slate.js'\nimport { PARAGRAPH_TYPE_ENUM } from '../../enum'\nimport { hasType } from '../../Util'\n\nlet selection: Selection = null\n// TODO 将antd的Tooltip重构成新的组件，支持mouseout自动隐藏\nexport default function Href(props: RenderElementProps): JSX.Element {\n    let { children, element, attributes } = props\n    let link = element[PARAGRAPH_TYPE_ENUM.link] as IHrefProps\n    if (link === undefined) console.error(element, '没有link参数')\n    const [visible, setVisible] = useState(false)\n    const linkData = {\n        url: link.url,\n        text: link.text\n    }\n    const editor = useSlate() as ReactEditor\n\n    const removeLinkMark = (selection: BaseSelection) => {\n        if (selection) {\n            const [node, at] = Editor.parent(editor, selection)\n            if (!hasType(node, PARAGRAPH_TYPE_ENUM.link)) return\n            Editor.withoutNormalizing(editor,() => {\n                Transforms.unsetNodes(editor, PARAGRAPH_TYPE_ENUM.link, { at })\n                Transforms.insertNodes(editor, { text: linkData.text }, { at })\n            })\n        }\n    }\n\n    const modalConfig = {\n        visible,\n        title: '编辑超链接',\n        getContainer: () => document.body,\n        destroyOnClose: true,\n        onOk() {\n            setVisible(false)\n            const values = form.getFieldsValue()\n            if (selection) {\n                const [node, at] = Editor.parent(editor, selection)\n                if (hasType(node, PARAGRAPH_TYPE_ENUM.link)) {\n                    Editor.withoutNormalizing(editor, () => {\n                        Transforms.delete(editor, { at: at })\n                        Transforms.insertNodes(editor, [\n                            {\n                                [PARAGRAPH_TYPE_ENUM.link]: { url: values.url, text: values.text },\n                                children: [ { text: '' } ]\n                            }\n                        ], { at: at })\n                    })\n                }\n            }\n        },\n        onCancel() {\n            setVisible(false)\n        }\n    }\n    const [form] = useForm()\n\n    const Edit = <div className={'link-tooltip'}>\n        <Button type={'text'} onMouseDown={() => {\n            selection = editor.selection\n            setVisible(true)\n        }}><EditOutlined />编辑</Button>\n        <Button type={'text'} onClick={() => window.open(link.url)}><ShareAltOutlined />访问</Button>\n        <Button type={'text'} onMouseDown={() => removeLinkMark(editor.selection)}><DeleteOutlined />取消链接</Button>\n    </div>\n    return <span {...attributes}>\n        <Tooltip title={Edit} placement={'bottom'} color={'white'} trigger={'click'}>\n            <span style={{ color: '#096DD9' }}>{linkData.text}</span>\n            <span>{children}</span>\n        </Tooltip>\n        <Modal {...modalConfig}>\n            <Form form={form} initialValues={linkData}>\n                <Form.Item label={'链接'} name={'url'}><Input placeholder={'输入链接'} /></Form.Item>\n                <Form.Item label={'文本'} name={'text'}><Input placeholder={'输入文本'} /></Form.Item>\n            </Form>\n        </Modal>\n    </span>\n}\n","import React from 'react'\nimport { RenderElementProps, useFocused, useSelected } from 'slate-react'\n\nimport { PARAGRAPH_TYPE_ENUM } from '../../enum'\n\nexport function ImageBlock (props: RenderElementProps): JSX.Element {\n    let {\n        element, attributes, children\n    } = props\n    const selected = useSelected()\n    const focused = useFocused()\n    const val = element[PARAGRAPH_TYPE_ENUM.image]\n    return <span {...attributes}>\n        <span contentEditable={'false'} suppressContentEditableWarning={true}>\n            <img src={val && val.url} alt='图片' style={{\n                maxWidth: '100%', maxHeight: '20em', boxShadow: `${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'}`\n            }}/>\n        </span>\n        {children}\n    </span>\n}\n","import React, { CSSProperties } from 'react'\nimport { RenderLeafProps } from 'slate-react'\n\nimport { MARK_TYPE_ENUM } from '../enum'\n\nexport default function Leaf(props: RenderLeafProps): JSX.Element {\n    let { attributes, children, leaf } = props\n    let cssProperties: CSSProperties = {}\n    if (!children) children = <></>\n    if (leaf[MARK_TYPE_ENUM.bold]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.bold])\n    }\n    if (leaf[MARK_TYPE_ENUM.italic]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.italic])\n    }\n    if (leaf[MARK_TYPE_ENUM.underline]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.underline])\n    }\n    if (leaf[MARK_TYPE_ENUM.color]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.color])\n    }\n    if (leaf[MARK_TYPE_ENUM.background]) {\n        cssProperties = Object.assign(cssProperties, leaf[MARK_TYPE_ENUM.background])\n    }\n\n    return <span {...attributes} style={cssProperties}>{children}</span>\n}\n\n","import './index.less'\n\nimport {\n    BgColorsOutlined,\n    BoldOutlined, CameraOutlined,\n    FontColorsOutlined,\n    ItalicOutlined,\n    OrderedListOutlined,\n    UnderlineOutlined, UnorderedListOutlined\n} from '@ant-design/icons'\nimport React, { useCallback, useMemo } from 'react'\nimport { createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\nimport {\n    Editable,\n    ReactEditor,\n    RenderElementProps,\n    RenderLeafProps,\n    Slate,\n    useFocused,\n    useSelected,\n    withReact\n} from 'slate-react'\n\nimport BlockButton from '../ActionSection/BlockButton'\nimport ColorButton from '../ActionSection/ColorButton'\nimport ImageButton from '../ActionSection/ImageButton'\nimport StyleButton from '../ActionSection/StyleButton'\nimport { MARK_TYPE_ENUM, PARAGRAPH_TYPE_ENUM, PARAGRAPH_TYPE_LIST } from '../enum'\nimport keyDownHandle from '../KeyEvent'\nimport withHref from '../Plugin/WithHref'\nimport { hasType } from '../Util'\nimport Href from './component/Href'\nimport { ImageBlock } from './component/Image'\nimport Leaf from './Leaf'\n\nconst plugins = [\n    withReact,\n    withHistory,\n    withHref\n]\n\nexport default function EditorSection (props: any) {\n    const {\n        nodes, setNodeList\n    } = props\n    const editor = useMemo(() => {\n        return plugins.reduce((editor, plugin) => {\n            return plugin(editor)\n        }, createEditor() as ReactEditor)\n    }, [])\n\n    const render = (props: RenderElementProps):JSX.Element => {\n        let {\n            element, attributes, children\n        } = props\n        // 为了支持嵌套，Void结点应该先于非Void节点挂载，以确保Image是ListItem的子元素\n        if (element[PARAGRAPH_TYPE_ENUM.image]) {\n            children = <ImageBlock {...props} children={props.children}/>\n        }\n        if (element[PARAGRAPH_TYPE_ENUM.link]) {\n            children = <Href {...props} children={props.children} />\n        }\n        if (element[PARAGRAPH_TYPE_ENUM.orderList]) {\n            children = <ol {...attributes}>{children}</ol>\n        }\n        if (element[PARAGRAPH_TYPE_ENUM.unOrderList]) {\n            children = <ul {...attributes}>{children}</ul>\n        }\n        if (element[PARAGRAPH_TYPE_ENUM.listItem]) {\n            children = <li {...attributes}>{children}</li>\n        }\n        if (!hasType(element, PARAGRAPH_TYPE_LIST)){\n            children = <p {...attributes}>{children}</p>\n        }\n        return children\n    }\n    const renderLeaf = useCallback((props:RenderLeafProps) => {\n        return <Leaf {...props} children={props.children}/>\n    }, [])\n\n    console.log(useSelected(), useFocused())\n\n    return <div className={'slate-editor'}>\n        <Slate value={nodes} editor={editor} onChange={setNodeList}>\n            <StyleButton icon={<BoldOutlined />} type={MARK_TYPE_ENUM.bold} value={{ fontWeight: 'bold' }}/>\n            <StyleButton icon={<ItalicOutlined />} type={MARK_TYPE_ENUM.italic} value={{ fontStyle: 'oblique' }}/>\n            <StyleButton icon={<UnderlineOutlined />} type={MARK_TYPE_ENUM.underline} value={{ textDecoration: 'underline' }}/>\n            <ColorButton type={MARK_TYPE_ENUM.color} icon={<FontColorsOutlined />} />\n            <ColorButton type={MARK_TYPE_ENUM.background} icon={<BgColorsOutlined />} />\n            <BlockButton icon={<OrderedListOutlined />} type={PARAGRAPH_TYPE_ENUM.orderList} value={[]} />\n            <BlockButton icon={<UnorderedListOutlined />} type={PARAGRAPH_TYPE_ENUM.unOrderList} value={[]} />\n            <ImageButton icon={<CameraOutlined />} type={PARAGRAPH_TYPE_ENUM.image} />\n            <hr/>\n            <Editable\n                className={'slate-editor-context'}\n                renderElement={render}\n                renderLeaf={renderLeaf}\n                onKeyDown={event => keyDownHandle(event, editor)}\n                placeholder='rich demo'\n                spellCheck\n                autoFocus\n            />\n        </Slate>\n    </div>\n}\n","import { Descendant } from 'slate'\n\nconst initRichTexts: Descendant[] = [\n    {\n        'children': [\n            {\n                'text': '使用Slate + TypeScript + React Hook + Antd实现的数据驱动的富文本编辑器，暂时不支持代码高亮，使用类似Virtual Dom的机制和思想去实现编辑器功能.扩展性将更好'\n            }\n        ]\n    },\n    {\n        'image': {\n            'url': 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg'\n        },\n        'children': [\n            {\n                'text': 'https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg'\n            }\n        ]\n    },\n    {\n        'orderList': [],\n        'children': [\n            {\n                'children': [\n                    {\n                        'text': '有顺序列表'\n                    }\n                ],\n                'listItem': []\n            },\n            {\n                'children': [\n                    {\n                        'text': '有顺序列表加粗样式',\n                        'bold': {\n                            'fontWeight': 'bold'\n                        }\n                    }\n                ],\n                'listItem': []\n            }\n        ]\n    },\n    {\n        'children': [\n            {\n                'bold': {\n                    'fontWeight': 'bold'\n                },\n                'text': ''\n            }\n        ]\n    },\n    {\n        'unOrderList': [],\n        'children': [\n            {\n                'children': [\n                    {\n                        'text': '无顺序列表',\n                        'italic': {\n                            'fontStyle': 'oblique'\n                        }\n                    }\n                ],\n                'listItem': []\n            },\n            {\n                'children': [\n                    {\n                        'italic': {\n                            'fontStyle': 'oblique'\n                        },\n                        'text': '无顺序列表加颜色',\n                        'color': {\n                            'color': 'rgb(235, 47, 150)'\n                        }\n                    }\n                ],\n                'listItem': []\n            }\n        ]\n    }\n]\nexport default initRichTexts\n","import './App.css';\n\nimport { Table, TableProps, Tooltip } from 'antd'\nimport React, { useState } from 'react'\nimport { Descendant, Element } from 'slate'\n\nimport EditorSection from './EditorSection';\nimport initRichTexts from './init'\nimport { getParagraphTypes } from './Util/paragraph'\n\n\nfunction App() {\n    const [nodes, setNodeList] = useState<Descendant[]>(initRichTexts)\n    if (nodes.length < 1) {\n        // 确保编辑器存在可编辑的区域\n        setNodeList([\n            {\n                children: [{ text: '' }]\n            }\n        ])\n    }\n    if (getParagraphTypes(nodes[nodes.length - 1] as Element).length) {\n        setNodeList(nodes.concat({\n            children: [{ text: '' }]\n        }))\n    }\n    const tableConfig:TableProps<Descendant> = {\n        columns: [\n            {\n                title: '节点类型',\n                dataIndex: 'type',\n                key: 'type',\n                width: 100,\n                render(val, data) {\n                    const types = Element.isElement(data) ? getParagraphTypes(data) : []\n                    return JSON.stringify(types)\n                }\n            },\n            {\n                title: '节点value',\n                dataIndex: 'children',\n                key: 'children',\n                width: 100,\n                render: (_, data) => (\n                    <Tooltip color={'white'} title={<pre style={{ color: 'black' }}>{JSON.stringify(data, null, 2)}</pre>}>\n                        <p style={{ width: 100, textOverflow: 'ellipsis', whiteSpace: 'nowrap', overflow: 'hidden' }}>\n                            {JSON.stringify(data)}\n                        </p>\n                    </Tooltip>\n                ),\n            }\n        ],\n        pagination: false,\n        rowKey: () => Math.random(),\n        dataSource: nodes\n    }\n    return (\n    <div className='App'>\n        <div className={'node-list'}>\n            <Table {...tableConfig}/>\n        </div>\n        <EditorSection nodes={nodes} setNodeList={setNodeList}/>\n    </div>\n);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}